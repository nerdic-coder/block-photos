/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */


import { HTMLStencilElement, JSXBase } from '@stencil/core/internal';
import {
  PhotoType,
} from './models/photo-type';

export namespace Components {
  interface AppAlbums {}
  interface AppPhoto {
    'albumId': string;
    'decrypt': boolean;
    'photoId': string;
    'updateCallback': any;
  }
  interface AppPhotos {
    'albumId': string;
    'photoId': string;
    'sharing': boolean;
  }
  interface AppRoot {}
  interface AppSettings {}
  interface AppShared {
    'photoId': string;
    'username': string;
  }
  interface AppSignin {}
  interface BlockImg {
    'decrypt': boolean;
    'photoId': string;
    'phototType': PhotoType;
    'refresh': number;
    'rotate': boolean;
  }
  interface EditPopover {
    'deleteCallback': any;
    'rotateCallback': any;
    'selectedPhotos': any[];
  }
  interface FilterPopover {
    'selectedPhotos': any[];
  }
  interface SelectAlbum {
    'endCallback': any;
    'selectedPhotos': any[];
    'startCallback': any;
  }
}

declare global {


  interface HTMLAppAlbumsElement extends Components.AppAlbums, HTMLStencilElement {}
  var HTMLAppAlbumsElement: {
    prototype: HTMLAppAlbumsElement;
    new (): HTMLAppAlbumsElement;
  };

  interface HTMLAppPhotoElement extends Components.AppPhoto, HTMLStencilElement {}
  var HTMLAppPhotoElement: {
    prototype: HTMLAppPhotoElement;
    new (): HTMLAppPhotoElement;
  };

  interface HTMLAppPhotosElement extends Components.AppPhotos, HTMLStencilElement {}
  var HTMLAppPhotosElement: {
    prototype: HTMLAppPhotosElement;
    new (): HTMLAppPhotosElement;
  };

  interface HTMLAppRootElement extends Components.AppRoot, HTMLStencilElement {}
  var HTMLAppRootElement: {
    prototype: HTMLAppRootElement;
    new (): HTMLAppRootElement;
  };

  interface HTMLAppSettingsElement extends Components.AppSettings, HTMLStencilElement {}
  var HTMLAppSettingsElement: {
    prototype: HTMLAppSettingsElement;
    new (): HTMLAppSettingsElement;
  };

  interface HTMLAppSharedElement extends Components.AppShared, HTMLStencilElement {}
  var HTMLAppSharedElement: {
    prototype: HTMLAppSharedElement;
    new (): HTMLAppSharedElement;
  };

  interface HTMLAppSigninElement extends Components.AppSignin, HTMLStencilElement {}
  var HTMLAppSigninElement: {
    prototype: HTMLAppSigninElement;
    new (): HTMLAppSigninElement;
  };

  interface HTMLBlockImgElement extends Components.BlockImg, HTMLStencilElement {}
  var HTMLBlockImgElement: {
    prototype: HTMLBlockImgElement;
    new (): HTMLBlockImgElement;
  };

  interface HTMLEditPopoverElement extends Components.EditPopover, HTMLStencilElement {}
  var HTMLEditPopoverElement: {
    prototype: HTMLEditPopoverElement;
    new (): HTMLEditPopoverElement;
  };

  interface HTMLFilterPopoverElement extends Components.FilterPopover, HTMLStencilElement {}
  var HTMLFilterPopoverElement: {
    prototype: HTMLFilterPopoverElement;
    new (): HTMLFilterPopoverElement;
  };

  interface HTMLSelectAlbumElement extends Components.SelectAlbum, HTMLStencilElement {}
  var HTMLSelectAlbumElement: {
    prototype: HTMLSelectAlbumElement;
    new (): HTMLSelectAlbumElement;
  };
  interface HTMLElementTagNameMap {
    'app-albums': HTMLAppAlbumsElement;
    'app-photo': HTMLAppPhotoElement;
    'app-photos': HTMLAppPhotosElement;
    'app-root': HTMLAppRootElement;
    'app-settings': HTMLAppSettingsElement;
    'app-shared': HTMLAppSharedElement;
    'app-signin': HTMLAppSigninElement;
    'block-img': HTMLBlockImgElement;
    'edit-popover': HTMLEditPopoverElement;
    'filter-popover': HTMLFilterPopoverElement;
    'select-album': HTMLSelectAlbumElement;
  }
}

declare namespace LocalJSX {
  interface AppAlbums {}
  interface AppPhoto {
    'albumId'?: string;
    'decrypt'?: boolean;
    'photoId'?: string;
    'updateCallback'?: any;
  }
  interface AppPhotos {
    'albumId'?: string;
    'photoId'?: string;
    'sharing'?: boolean;
  }
  interface AppRoot {}
  interface AppSettings {}
  interface AppShared {
    'photoId'?: string;
    'username'?: string;
  }
  interface AppSignin {}
  interface BlockImg {
    'decrypt'?: boolean;
    'photoId'?: string;
    'phototType'?: PhotoType;
    'refresh'?: number;
    'rotate'?: boolean;
  }
  interface EditPopover {
    'deleteCallback'?: any;
    'rotateCallback'?: any;
    'selectedPhotos'?: any[];
  }
  interface FilterPopover {
    'selectedPhotos'?: any[];
  }
  interface SelectAlbum {
    'endCallback'?: any;
    'selectedPhotos'?: any[];
    'startCallback'?: any;
  }

  interface IntrinsicElements {
    'app-albums': AppAlbums;
    'app-photo': AppPhoto;
    'app-photos': AppPhotos;
    'app-root': AppRoot;
    'app-settings': AppSettings;
    'app-shared': AppShared;
    'app-signin': AppSignin;
    'block-img': BlockImg;
    'edit-popover': EditPopover;
    'filter-popover': FilterPopover;
    'select-album': SelectAlbum;
  }
}

export { LocalJSX as JSX };


declare module "@stencil/core" {
  export namespace JSX {
    interface IntrinsicElements {
      'app-albums': LocalJSX.AppAlbums & JSXBase.HTMLAttributes<HTMLAppAlbumsElement>;
      'app-photo': LocalJSX.AppPhoto & JSXBase.HTMLAttributes<HTMLAppPhotoElement>;
      'app-photos': LocalJSX.AppPhotos & JSXBase.HTMLAttributes<HTMLAppPhotosElement>;
      'app-root': LocalJSX.AppRoot & JSXBase.HTMLAttributes<HTMLAppRootElement>;
      'app-settings': LocalJSX.AppSettings & JSXBase.HTMLAttributes<HTMLAppSettingsElement>;
      'app-shared': LocalJSX.AppShared & JSXBase.HTMLAttributes<HTMLAppSharedElement>;
      'app-signin': LocalJSX.AppSignin & JSXBase.HTMLAttributes<HTMLAppSigninElement>;
      'block-img': LocalJSX.BlockImg & JSXBase.HTMLAttributes<HTMLBlockImgElement>;
      'edit-popover': LocalJSX.EditPopover & JSXBase.HTMLAttributes<HTMLEditPopoverElement>;
      'filter-popover': LocalJSX.FilterPopover & JSXBase.HTMLAttributes<HTMLFilterPopoverElement>;
      'select-album': LocalJSX.SelectAlbum & JSXBase.HTMLAttributes<HTMLSelectAlbumElement>;
    }
  }
}


